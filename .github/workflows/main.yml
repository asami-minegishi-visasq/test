name: Deployment
on:
  workflow_dispatch: 
  push:
    branches:
      - main
      - staging
      - feature/test_mine

env:
  SERVICE_NAME: test
  APP_VERSION: v1
  REGION: us-central1

jobs:
  set-tag:
    if: ${{ ! contains(github.event.head_commit.message, '[no switch]') }}
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set_env.outputs.environment }}
      ready_tag_name: ${{ steps.set_env.outputs.ready_tag_name }}
      project_id: ${{ steps.set_env.outputs.project_id }}
      project_name: ${{ steps.set_env.outputs.project_name }}
      service_account_key: ${{ steps.set_env.outputs.service_account_key }}
      tag_name: ${{ steps.set_tag.outputs.tag_name }}
      revision_base: ${{ steps.set_env.outputs.revision_base }}
    steps:
      - uses: actions/checkout@v4
      - name: Set environment for branch and tag
        id: set_env
        run: |
          echo "revision_base=staging" >> $GITHUB_OUTPUT
          echo "environment=stg" >> $GITHUB_OUTPUT
          echo "ready_tag_name=ready-stg" >> $GITHUB_OUTPUT
          echo "project_id=400301755221" >> $GITHUB_OUTPUT
          echo "project_name=private-asami-minegishi-01" >> $GITHUB_OUTPUT
          echo "slack_channel=C0185CQ1Q3S" >> $GITHUB_OUTPUT
          if [[ $GITHUB_REF == *"/test_"* ]]; then
            echo "tesssssssssssssssssssssstttttttt"
          elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
              echo "revision_base=release" >> $GITHUB_OUTPUT
              echo "environment=prod" >> $GITHUB_OUTPUT
              echo "ready_tag_name=ready-prod" >> $GITHUB_OUTPUT
              echo "project_id=400301755221" >> $GITHUB_OUTPUT
              echo "project_name=private-asami-minegishi-01" >> $GITHUB_OUTPUT
              echo "slack_channel=C0185CQ1Q3S" >> $GITHUB_OUTPUT
          fi
                    
      - name: Get Tag List
        id: get_tag
        run: |
          git fetch --prune --unshallow
          
          # Debug: Show available tags
          echo "Available tags:"
          git tag -l
          
          latest_tag=$(git tag -l --sort=version:refname "${{ steps.set_env.outputs.revision_base }}-${{ env.APP_VERSION }}*" | tail -n 1)
          
          release_number=$(echo $latest_tag | sed "s/${{ steps.set_env.outputs.revision_base }}-${{ env.APP_VERSION }}-//" | awk '{print $0+1}')
          echo "release_number=${release_number}" >> $GITHUB_ENV
          
      - name: Create and Push New Tag
        id: set_tag
        run: |
          tag_name="${{ steps.set_env.outputs.revision_base }}-${{ env.APP_VERSION }}-${{ env.release_number }}"
          git tag $tag_name
          git push origin $tag_name
          echo "tag_name=${tag_name}" >> $GITHUB_OUTPUT

  switch-traffic:
    needs: 
      - set-tag
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.set-tag.outputs.environment }}
    concurrency:
      group: switch-traffic-${{ needs.set-tag.outputs.environment }}
      cancel-in-progress: true
    permissions:
      contents: 'read'
      id-token: 'write'
    outputs:
      services: ${{ steps.services_list.outputs.services }}
    steps:
      - uses: actions/checkout@v4
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "projects/${{ needs.set-tag.outputs.project_id }}/locations/global/workloadIdentityPools/cloud-run-test/providers/github"
          service_account: "cloud-run-test@${{ needs.set-tag.outputs.project_name }}.iam.gserviceaccount.com"
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: List Cloud Run services
        id: services_list
        run: |
          services=$(gcloud run services list --region=${{ env.REGION }} --format="value(name)" --filter="metadata.name:${{ env.SERVICE_NAME }}*")
          echo 'services<<EOF' >> $GITHUB_OUTPUT
          echo ${services} >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Switch Traffic
        run: |
          for service in ${{ steps.services_list.outputs.services }}; do
            revision="${service}-${{ needs.set-tag.outputs.tag_name }}"
            gcloud run services update-traffic "$service" --region=${{ env.REGION }} --to-revisions $revision=100
            echo "Updated traffic for service $service to revision $revision"
          done

  cleanup-revision-tags:
    needs: 
      - set-tag
      - switch-traffic
    environment:
      name: wait-${{ needs.set-tag.outputs.environment }}
    concurrency:
      group: cleanup-${{ needs.set-tag.outputs.environment }}
      cancel-in-progress: true
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "projects/${{ needs.set-tag.outputs.project_id }}/locations/global/workloadIdentityPools/cloud-run-test/providers/github"
          service_account: "cloud-run-test@${{ needs.set-tag.outputs.project_name }}.iam.gserviceaccount.com"
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Cleanup revision-tags
        run: |
          values=($(echo "${{ vars.PROTECTED_REVISION_TAGS }}" | tr ',' ' '))
          for service in ${{ needs.switch-traffic.outputs.services }}; do
            revision="${service}-${{ needs.set-tag.outputs.tag_name }}"
            protected_revision_tags=""
            # PROTECTED_REVISION_TAGSの中身があればリビジョンを保護する
            for value in "${values[@]}"; do
                image_url=$(gcloud run revisions describe "${service}-${value}" --region=${{ env.REGION }} --format="value(image)" 2>/dev/null || echo "")
                if [[ $value == ${{ needs.set-tag.outputs.revision_base }}* ]] && [[ -n "$image_url" ]]; then
                  image_url=$(echo $image_url | sed 's|gcr.io/${{ needs.set-tag.outputs.project_name }}|us-docker.pkg.dev/${{ needs.set-tag.outputs.project_name }}/gcr.io|g')
                  protected_revision_tags+=",${value}=${service}-${value}"
                  tag_name="protected-${value}"
                  gcloud artifacts docker tags add "${image_url}" "${image_url%@*}:${tag_name}"
                fi
            done
            echo $protected_revision_tags
            # 保護対象リビジョンが存在しない場合、全ての保護されているイメージから保護用のタグを削除する
            # 保護対象リビジョンが１つでも存在する場合はこの処理は行わない（費用対効果が薄いため）
            if [[ -z "$protected_revision_tags" ]]; then
              image_url=$(gcloud run revisions describe "${revision}" --region=${{ env.REGION }} --format="value(image)" | sed 's|gcr.io/${{ needs.set-tag.outputs.project_name }}|us-docker.pkg.dev/${{ needs.set-tag.outputs.project_name }}/gcr.io|g')
              protected_tags=$(gcloud artifacts docker tags list "${image_url%@*}" --format="value(tag)"  --filter="tag~/tags/protected-*")
              for tag in ${protected_tags}; do
                gcloud artifacts docker tags delete "${image_url%@*}:${tag}"
              done
            fi
            # 必要なリビジョンタグのみsetしなおす
            gcloud run services update-traffic "$service" --region=${{ env.REGION }} --set-tags "${{ needs.set-tag.outputs.ready_tag_name }}=${revision},${{ needs.set-tag.outputs.tag_name }}=${revision}${protected_revision_tags}"
          done
