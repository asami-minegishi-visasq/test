name: Deployment
on:
  push:
    branches:
      - main
      - staging

env:
  SERVICE_NAME: test
  APP_VERSION: v1
  GCLOUD_SDK_VERSION: 457.0.0
  REGION: us-central1

jobs:
  set-tag:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set_env.outputs.environment }}
      ready_tag_name: ${{ steps.set_env.outputs.ready_tag_name }}
      project_id: ${{ steps.set_env.outputs.project_id }}
      service_account_key: ${{ steps.set_env.outputs.service_account_key }}
      tag_name: ${{ steps.set_tag.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v3
      - name: Set environment for branch and tag
        id: set_env
        run: |
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
              echo "revision_base=release" >> $GITHUB_ENV
              echo "environment=prod" >> $GITHUB_OUTPUT
              echo "ready_tag_name=ready-prod" >> $GITHUB_OUTPUT
              echo "project_id=${{ secrets.GCP_PROJECT_ID_PROD }}" >> $GITHUB_OUTPUT
              echo "service_account_key=${{ secrets.GCP_SA_KEY_PROD }}" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == 'refs/heads/staging' ]]; then
              echo "revision_base=staging" >> $GITHUB_ENV
              echo "environment=stg" >> $GITHUB_OUTPUT
              echo "ready_tag_name=ready-stg" >> $GITHUB_OUTPUT
              echo "project_id=${{ secrets.GCP_PROJECT_ID_STG }}" >> $GITHUB_OUTPUT
              echo "service_account_key=${{ secrets.GCP_SA_KEY_STG }}" >> $GITHUB_OUTPUT
          else
              echo "Unsupported branch. Exiting..."
              exit 1
          fi
                    
      - name: Get Tag List
        id: get_tag
        run: |
          git fetch --prune --unshallow
          
          # Debug: Show available tags
          echo "Available tags:"
          git tag -l
          
          latest_tag=$(git tag -l --sort=version:refname "${{ env.revision_base }}-${{ env.APP_VERSION }}*" | tail -n 1)
          
          release_number=$(echo $latest_tag | sed "s/${{ env.revision_base }}-${{ env.APP_VERSION }}-//" | awk '{print $0+1}')
          echo "release_number=${release_number}" >> $GITHUB_ENV
          
      - name: Create and Push New Tag
        id: set_tag
        run: |
          tag_name="${{ env.revision_base }}-${{ env.APP_VERSION }}-${{ env.release_number }}"
          git tag $tag_name
          git push origin $tag_name
          echo "tag_name=${tag_name}" >> $GITHUB_OUTPUT
          
  switch-traffic:
    needs: set-tag
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.set-tag.outputs.environment }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: test
        run: |
          echo ${{ needs.set-tag.outputs.tag_name }}
          
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v0.8.0
        with:
          workload_identity_provider: ${{ secrets.WAP }}
          service_account: ${{ secrets.SA }}
          
      - name: Test Cloud Run services
        run: |
          gcloud run services list --format="value(name)"

      # - name: Authenticate with Google Cloud
      #   run: |
      #     uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      #     with:
      #       version: ${{ env.GCLOUD_SDK_VERSION }}
      #       project_id: ${{ env.project_id }}
      #       service_account_key: ${{ env.service_account_key }}
      #       export_default_credentials: true
            
      # - name: List Cloud Run services
      #   run: |
      #     services=$(gcloud run services list --format="value(name)" --filter="metadata.name:$SERVICE_NAME*")
      #     echo "services=${services}" >> $GITHUB_ENV
          
      # - name: Switch Traffic
      #   run: |
      #     for service in ${{ env.services }}; do
      #       revision="${service}-${{ needs.set-tag.outputs.tag_name }}"
      #       if gcloud run revisions describe "$revision" --format="value(status)" 2>/dev/null | grep -q "SERVING"; then
      #         gcloud run services update-traffic "$service" --region=${{ env.REGION }} --to-revisions="$revision"
      #         echo "Updated traffic for service $service to revision $revision"
      #       else
      #         echo "Revision $revision not found or not serving for service $service"
      #       fi
      #     done
      
      # - name: Sleep # 古いリビジョン向けに走っている処理が完了するのを待つ（時間は適当なので何かあれば適宜調整のこと）
      #   run: sleep 180s
        
      # - name: Cleanup revision-tags
      #   run: |
      #     for service in ${{ env.services }}; do
      #       revision="${service}-${{ needs.set-tag.outputs.tag_name }}"
      #       gcloud run services update-traffic "$service" --region=${{ env.REGION }} --set-tags ${{ needs.set-tag.outputs.ready_tag_name }}=$revision, ${{ needs.set-tag.outputs.tag_name }}=$revision
      #     done
