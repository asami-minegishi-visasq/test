name: Deployment
on:
  workflow_dispatch: 
  push:
    branches:
      - main
      - staging
      - feature/test_mine

env:
  SERVICE_NAME: test
  APP_VERSION: v1
  REGION: us-central1

jobs:
  set-tag:
    if: ${{ ! contains(github.event.head_commit.message, '[no switch]') }}
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set_env.outputs.environment }}
      ready_tag_name: ${{ steps.set_env.outputs.ready_tag_name }}
      project_id: ${{ steps.set_env.outputs.project_id }}
      project_name: ${{ steps.set_env.outputs.project_name }}
      service_account_key: ${{ steps.set_env.outputs.service_account_key }}
      tag_name: ${{ steps.set_tag.outputs.tag_name }}
      revision_base: ${{ steps.set_env.outputs.revision_base }}
    steps:
      - uses: actions/checkout@v3
      - name: Set environment for branch and tag
        id: set_env
        run: |
          echo "revision_base=teststaging" >> $GITHUB_OUTPUT
          echo "environment=stg" >> $GITHUB_OUTPUT
          echo "ready_tag_name=ready-stg" >> $GITHUB_OUTPUT
          echo "project_id=400301755221" >> $GITHUB_OUTPUT
          echo "project_name=private-asami-minegishi-01" >> $GITHUB_OUTPUT
          echo "slack_channel=C0185CQ1Q3S" >> $GITHUB_OUTPUT
          if [[ $GITHUB_REF == *"/test_"* ]]; then
            echo "tesssssssssssssssssssssstttttttt"
          elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
              echo "revision_base=release" >> $GITHUB_OUTPUT
              echo "environment=prod" >> $GITHUB_OUTPUT
              echo "ready_tag_name=ready-prod" >> $GITHUB_OUTPUT
              echo "project_id=400301755221" >> $GITHUB_OUTPUT
              echo "project_name=private-asami-minegishi-01" >> $GITHUB_OUTPUT
              echo "slack_channel=C0185CQ1Q3S" >> $GITHUB_OUTPUT
          fi
                    
      - name: Get Tag List
        id: get_tag
        run: |
          git fetch --prune --unshallow
          
          # Debug: Show available tags
          echo "Available tags:"
          git tag -l
          
          latest_tag=$(git tag -l --sort=version:refname "${{ steps.set_env.outputs.revision_base }}-${{ env.APP_VERSION }}*" | tail -n 1)
          
          release_number=$(echo $latest_tag | sed "s/${{ steps.set_env.outputs.revision_base }}-${{ env.APP_VERSION }}-//" | awk '{print $0+1}')
          echo "release_number=${release_number}" >> $GITHUB_ENV
          
      - name: Create and Push New Tag
        id: set_tag
        run: |
          tag_name="${{ steps.set_env.outputs.revision_base }}-${{ env.APP_VERSION }}-${{ env.release_number }}"
          git tag $tag_name
          git push origin $tag_name
          echo "tag_name=${tag_name}" >> $GITHUB_OUTPUT

      - name: Notify to Slack
        run: |
          echo ${{ steps.set_tag.outputs.tag_name }}
          echo ${{ steps.set_env.outputs.project_id }}
          echo ${{ steps.set_env.outputs.slack_channel }}
          echo ${{ github.ref_name }}
          curl -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer ${{ secrets.VISASQ_SLACK_OAUTH_ACCESS_TOKEN }}" \
            -H "Content-type: application/json" \
            -d "{\"channel\":\"${{ steps.set_env.outputs.slack_channel }}\",\"unfurl_links\":false,\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"TEST switch-traffic: <https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}|Github Actions Page>\"}},{\"type\":\"section\",\"fields\":[{\"type\":\"mrkdwn\",\"text\":\"*GCP Project*\n${{ steps.set_env.outputs.project_name }}\"},{\"type\":\"mrkdwn\",\"text\":\"*Revision*\n${{ steps.set_tag.outputs.tag_name }}\"},{\"type\":\"mrkdwn\",\"text\":\"*Branch*\n${{ github.ref_name }}\"}]}]}"
          echo "{\"channel\":\"${{ steps.set_env.outputs.slack_channel }}\",\"unfurl_links\":false,\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"TEST switch-traffic: <https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}|Github Actions Page>\"}},{\"type\":\"section\",\"fields\":[{\"type\":\"mrkdwn\",\"text\":\"*GCP Project*\n${{ steps.set_env.outputs.project_name }}\"},{\"type\":\"mrkdwn\",\"text\":\"*Revision*\n${{ steps.set_tag.outputs.tag_name }}\"},{\"type\":\"mrkdwn\",\"text\":\"*Branch*\n${{ github.ref_name }}\"}]}]}"

 
  switch-traffic:
    needs: set-tag
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.set-tag.outputs.environment }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v3
      - name: Authenticate with Google Cloud
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: "projects/${{ needs.set-tag.outputs.project_id }}/locations/global/workloadIdentityPools/cloud-run-test/providers/github"
          service_account: "cloud-run-test@${{ needs.set-tag.outputs.project_name }}.iam.gserviceaccount.com"
          
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
          
      - name: Test Cloud Run services
        run: |
          # Debug: Show all services list
          gcloud run services list --region=${{ env.REGION }} --format="value(name)"
            
      - name: List Cloud Run services
        run: |
          services=$(gcloud run services list --region=${{ env.REGION }} --format="value(name)" --filter="metadata.name:${{ env.SERVICE_NAME }}*")
          echo "services=${services}" >> $GITHUB_ENV
          
      - name: Switch Traffic
        run: |
          for service in ${{ env.services }}; do
            revision="${service}-${{ needs.set-tag.outputs.tag_name }}"
            gcloud run services update-traffic "$service" --region=${{ env.REGION }} --to-revisions $revision=100
            echo "Updated traffic for service $service to revision $revision"
          done
      
      - name: Sleep # 古いリビジョン向けに走っている処理が完了するのを待つ（時間は適当なので何かあれば適宜調整のこと）
        if: ${{ success() && github.ref == 'refs/heads/main' }}
        run: sleep 1s
        
      - name: Cleanup revision-tags
        run: |
          values=${{ vars.PROTECTED_REVISION_TAGS }}
          values=(${values//,/ })
          for service in ${{ env.services }}; do
            protected_revision_tags=""
            for value in "${values[@]}"; do
              if [[ $value == ${{ needs.set-tag.outputs.revision_base }}* ]]; then
                protected_revision_tags+=",${value}=${service}-${value}"
              fi
            done
            echo $protected_revision_tags
            revision="${service}-${{ needs.set-tag.outputs.tag_name }}"
            gcloud run services update-traffic "$service" --region=${{ env.REGION }} --set-tags "${{ needs.set-tag.outputs.ready_tag_name }}=${revision},${{ needs.set-tag.outputs.tag_name }}=${revision}${protected_revision_tags}"
          done
