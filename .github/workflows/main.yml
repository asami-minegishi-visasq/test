name: set-tag-and-switch-traffic
on:
  workflow_call:
    inputs:
      service_name: 
        type: string
        required: true
      app_version: 
        type: string
        required: true

env:
  SERVICE_ACCOUNT: 'cloud-run-test'
  IDENTITY_POOL_NAME: 'cloud-run-test'
  IDENTITY_PROVIDER_NAME: 'github'
  REGION: 'us-central1'

jobs:
  set-env:
    if: ${{ ! contains(github.event.head_commit.message, '[no switch]') && ! contains(github.event.head_commit.message, '[no deploy]') }}
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set_env_production.outputs.environment || 'stg' }}
      project_id: ${{ steps.set_env_production.outputs.project_id || '400301755221' }}
      project_name: ${{ steps.set_env_production.outputs.project_name || 'private-asami-minegishi-01' }}
      revision_base: ${{ steps.set_env_production.outputs.revision_base || 'staging' }}
      slack_channel: ${{ steps.set_env_production.outputs.slack_channel || 'C0185CQ1Q3S' }}
    steps:
      - name: Set environment for production
        id: set_env_production
        if: github.base_ref == 'main' || github.ref_name == 'main'
        run: |
          echo "revision_base=release" >> $GITHUB_OUTPUT
          echo "environment=prod" >> $GITHUB_OUTPUT
          echo "project_id=400301755221" >> $GITHUB_OUTPUT
          echo "project_name=private-asami-minegishi-01" >> $GITHUB_OUTPUT
          echo "slack_channel=C0185CQ1Q3S" >> $GITHUB_OUTPUT

  set-tag:
    runs-on: ubuntu-latest
    needs: set-env
    outputs:
      tag_name: ${{ steps.set_tag.outputs.tag_name }}
    steps:
      - name: debug
        run: |
          echo 'github.event_name: ' ${{ github.event_name }}
          echo 'github.ref_name: ' ${{ github.ref_name }}
          echo 'github.base_ref: ' ${{ github.base_ref }}
          echo 'inputs.is_switch_traffic: ' ${{ inputs.is_switch_traffic }}
          echo 'inputs.app_version: ' ${{ inputs.app_version }}
          echo 'inputs.service_name: ' ${{ inputs.service_name }}
          cat $GITHUB_EVENT_PATH

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Tag List
        id: get_tag
        run: |
          latest_tag=$(git tag -l --sort=version:refname "${{ needs.set-env.outputs.revision_base }}-${{ inputs.app_version }}*" | tail -n 1)
          release_number=$(echo $latest_tag | sed "s/${{ needs.set-env.outputs.revision_base }}-${{ inputs.app_version }}-//" | awk '{print $0+1}')
          # release_number=$(echo $latest_tag | sed "s/${{ needs.set-env.outputs.revision_base }}-${{ inputs.app_version }}-//" | awk '{print $0}')
          echo "release_number=${release_number}" >> $GITHUB_ENV
          
      - name: Create and Push New Tag
        id: set_tag
        run: |
          tag_name="${{ needs.set-env.outputs.revision_base }}-${{ inputs.app_version }}-${{ env.release_number }}"
          # git tag $tag_name
          # git push origin $tag_name
          echo "tag_name=${tag_name}" >> $GITHUB_OUTPUT
          slack_message="動作確認できたらswitch-trafficしてください"
          if [[ '${{ inputs.is_switch_traffic }}' == 'false' ]] ; then
            slack_message="switch-trafficなし"
          fi
          echo $slack_message

  switch-traffic:
    if: ${{ github.event_name == 'push' || inputs.is_switch_traffic == true }}
    needs:
      - set-env
      - set-tag
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.set-env.outputs.environment }}
    concurrency:
      group: switch-traffic-${{ needs.set-env.outputs.environment }}
      cancel-in-progress: true
    permissions:
      contents: 'read'
      id-token: 'write'
    outputs:
      services: ${{ steps.services_list.outputs.services }}
    steps:
      - uses: actions/checkout@v4
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "projects/${{ needs.set-env.outputs.project_id }}/locations/global/workloadIdentityPools/${{ env.IDENTITY_POOL_NAME }}/providers/${{ env.IDENTITY_PROVIDER_NAME }}"
          service_account: "${{ env.SERVICE_ACCOUNT }}@${{ needs.set-env.outputs.project_name }}.iam.gserviceaccount.com"
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: List Cloud Run services
        id: services_list
        run: |
          services=$(gcloud run services list --region=${{ env.region }} --format="value(name)" --filter="metadata.name:${{ inputs.service_name }}*")
          echo 'services<<EOF' >> $GITHUB_OUTPUT
          echo ${services} >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Switch Traffic
        run: |
          for service in ${{ steps.services_list.outputs.services }}; do
            revision="${service}-${{ needs.set-tag.outputs.tag_name }}"
            gcloud run services update-traffic "$service" --region=${{ env.region }} --to-revisions $revision=100
            echo "Updated traffic for service $service to revision $revision"
          done

  cleanup-revision-tags:
    needs:
      - set-env
      - switch-traffic
    environment:
      name: wait-${{ needs.set-env.outputs.environment }}
    concurrency:
      group: cleanup-${{ needs.set-env.outputs.environment }}
      cancel-in-progress: true
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "projects/${{ needs.set-env.outputs.project_id }}/locations/global/workloadIdentityPools/${{ env.IDENTITY_POOL_NAME }}/providers/${{ env.IDENTITY_PROVIDER_NAME }}"
          service_account: "${{ env.SERVICE_ACCOUNT }}@${{ needs.set-env.outputs.project_name }}.iam.gserviceaccount.com"
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Cleanup revision-tags
        run: |
          protected_revision_tags=($(echo "${{ vars.PROTECTED_REVISION_TAGS }}" | tr ',' ' '))
          for service in ${{ needs.switch-traffic.outputs.services }}; do
            # PROTECTED_REVISION_TAGSの中身があればArtifact Registryイメージに保護用のタグを付与する
            for protected_revision_tag in "${protected_revision_tags[@]}"; do
                # リビジョンの存在確認
                image_url=$(gcloud run revisions describe "${service}-${protected_revision_tag}" --region=${{ env.REGION }} --format="value(image)" 2>/dev/null || echo "")
                if [[ $protected_revision_tag == ${{ needs.set-env.outputs.revision_base }}* ]] && [[ -n "$image_url" ]]; then
                  # Artifact Registryイメージ保護
                  image_url=$(echo $image_url | sed 's|gcr.io/${{ needs.set-env.outputs.project_name }}|us-docker.pkg.dev/${{ needs.set-env.outputs.project_name }}/gcr.io|g')
                  tag_name="protected-vars-${protected_revision_tag}"
                  gcloud artifacts docker tags add "${image_url}" "${image_url%@*}:${tag_name}"
                fi
            done
            # 下記に該当しないリビジョンのタグを抽出する
            # ・トラフィックが割り当てられている
            # ・pullrequestまたはreadyから始まるリビジョンタグが付いている
            # ・PROTECTED_REVISION_TAGSに含まれるリビジョンである
            traffic=$(gcloud run services describe "$service" --region=${{ env.region }} --format="json(spec.traffic)")
            echo $traffic
            delete_tags=$(echo "$traffic" | jq -r --argjson protected_tags "$(printf '%s\n' "${protected_revision_tags[@]}" | jq -R . | jq -s .)" '
              .spec.traffic
              | group_by(.revisionName)
              | map(select(
                  all(.percent == null) and all((.tag | startswith("pullrequest") | not) and (.tag | startswith("protected") | not) and (.tag | startswith("ready") | not) and (.tag as $tag | $protected_tags | index($tag) | not))
                ))
              | map(.[0].tag)
              | join(",")
            ')
            echo "$delete_tags"
            # いらないリビジョンタグを消す
            gcloud run services update-traffic "$service" --region=${{ env.region }} --remove-tags="$delete_tags"
          done
